'''
1. 선형 탐색 (Linear search algorithm)
 - 탐색하는 값을 리스트의 맨 앞에서 부터 끝까지 차례대로 찾아가는 방식.
 - 장점 : 구현이 쉽고, 정렬되니 않은 리스트에서 사용 가능.
 - 단점 : 검색할 리스트의 길이가 길면 비효율적.

2. 이진 탐색 (Binary search algorithm)
 - 오름차순으로 정렬되어 있는 리스트에서 탐색 시, 중간 값을 임의 값으로 선택하여
   중간 값과 탐색 값의 크고 작음을 비교하는 방식.
 - 장점 : 검색이 반복될 때마다 목표값을 찾을 확률은 두 배가 되므로 탐색 속도가 빠름.
 - 단점 : 정렬된 리스트에만 사용할 수 있음.
'''

'''
[이진 탐색 구현]
리스트 L 과, 그 안에서 찾으려 하는 원소 x 가 인자로 주어질 때, 
x 와 같은 값을 가지는 원소의 인덱스를 리턴하는 함수 solution() 을 완성하세요. 
만약 리스트 L 안에 x 와 같은 값을 가지는 원소가 존재하지 않는 경우에는 -1 을 리턴합니다. 
리스트 L 은 자연수 원소들로 이루어져 있으며, 크기 순으로 정렬되어 있다고 가정합니다. 
또한, 동일한 원소는 두 번 이상 나타나지 않습니다.

예를 들어,
L = [2, 3, 5, 6, 9, 11, 15]
x = 6
의 인자들이 주어지면, L[3] == 6 이므로 3 을 리턴해야 합니다.

또 다른 예로,
L = [2, 5, 7, 9, 11]
x = 4
로 주어지면, 리스트 L 내에 4 의 원소가 존재하지 않으므로 -1 을 리턴해야 합니다.
'''
def solution(L, x):
    lower = 0
    upper = len(L) - 1
    idx = -1

    while lower <= upper:
        middle = (lower + upper) // 2
        if L[middle] == x:
            idx = middle
            break
        elif L[middle] < x:
            lower = middle + 1
        else:
            upper = middle - 1
    return idx

print(solution([2, 3, 5, 6, 9, 11, 15], 16))